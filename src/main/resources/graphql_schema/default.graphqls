scalar DateTime

type Query {
    users: [User!]
    projects: [Project!]
}

type Mutation {

    createUser(firstName: String!, lastName: String!, email: String!, telephone1: String!, telephone2: String): User!
    updateUser(id: ID!, firstName: String, lastName: String, email: String, telephone1: String, telephone2: String): User!
    deleteUser(id: ID!): String!

    createProject(title: String!, description: String!, location: String!, start: DateTime!, end: DateTime!): Project!
    updateProject(id: ID!, title: String, description: String, location: String, start: DateTime, end: DateTime): Project!
    deleteProject(id: ID!): String!
    scheduleProject(id: ID!): Project
}

type User {
    id: ID!
    fullName: String!
    firstName: String!
    lastName: String!
    email: String!
    telephone1: String!
    telephone2: String
    preferences: [Preference!]
}

type Preference {
    id: ID!
    type: PreferenceType!
    notes: String
    keywords: [PreferenceKeyword!]
    friends: [PreferenceUser!]
}

type PreferenceKeyword {
    id: ID!
    value: String!
    notes: String
}

type PreferenceUser {
    id: ID!
    user: User!
    notes: String
}

type Project {
    id: ID!
    title: String!
    description: String!
    location: String!
    start: DateTime!
    end: DateTime!
    status: ProjectStatus!
    keywords: [ProjectKeyword!]
    allocations: [Allocation!]
}

type ProjectKeyword {
    id: ID!
    value: String!
    notes: String
}

type Allocation {
    id: ID!
    start: DateTime!
    end: DateTime!
    strength: Int!
    user: User!
}

enum ProjectStatus {
    NEW
    OPEN
    CLOSED
    CANCELLED
}

enum PreferenceType {
    WORK_WITH
    WORK_ON
    KEYWORD
}
