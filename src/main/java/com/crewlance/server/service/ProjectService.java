package com.crewlance.server.service;

import com.crewlance.server.error.ResourceNotFoundException;
import com.crewlance.server.model.Project;
import com.crewlance.server.model.ProjectKeyword;
import com.crewlance.server.repository.ProjectRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.jooq.lambda.Seq.seq;

@Service
public class ProjectService extends BaseService {

    private final ProjectRepository projectRepository;
    private final Scheduler scheduler;

    public ProjectService(final ProjectRepository projectRepository, final Scheduler scheduler) {
        this.projectRepository = projectRepository;
        this.scheduler = scheduler;
    }

    @Transactional
    public Project create(final Project project) {
        generateKeywords(project);
        return projectRepository.save(project);
    }

    @Transactional
    public Project update(final Project project) {
        removeGeneratedKeywords(project);
        generateKeywords(project);
        return projectRepository.save(project);
    }

    @Transactional
    public Project schedule(final Project project) {
        scheduler.scheduleProject(project);
        return projectRepository.save(project);
    }

    @Transactional
    public String delete(final Project project) {
        projectRepository.delete(project);
        return project.getId();
    }

    public List<Project> findAll() {
        return seq(projectRepository.findAll()).toList();
    }

    public Project findById(final String id) {
        return projectRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException(String.format("Could not find project with id: %s", id)));
    }

    private static void removeGeneratedKeywords(final Project project) {
        project.getKeywords().removeAll(seq(project.getKeywords())
                .filter(keyword -> keyword.isAutoGenerated())
                .toSet());
    }

    private static void generateKeywords(final Project project) {
        project.getKeywords().add(new ProjectKeyword(project, project.getLocation(), true));
    }
}
